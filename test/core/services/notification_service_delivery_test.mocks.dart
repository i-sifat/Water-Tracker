// Mocks generated by Mockito 5.4.6 from annotations
// in watertracker/test/core/services/notification_service_delivery_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:watertracker/core/services/premium_service.dart' as _i2;
import 'package:watertracker/core/services/storage_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PremiumService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPremiumService extends _i1.Mock implements _i2.PremiumService {
  MockPremiumService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> isPremiumUnlocked() =>
      (super.noSuchMethod(
            Invocation.method(#isPremiumUnlocked, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<String> generateDeviceCode() =>
      (super.noSuchMethod(
            Invocation.method(#generateDeviceCode, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#generateDeviceCode, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<bool> validateUnlockCode(String? unlockCode) =>
      (super.noSuchMethod(
            Invocation.method(#validateUnlockCode, [unlockCode]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> unlockPremium(String? unlockCode) =>
      (super.noSuchMethod(
            Invocation.method(#unlockPremium, [unlockCode]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> submitDonationProof({String? additionalMessage}) =>
      (super.noSuchMethod(
            Invocation.method(#submitDonationProof, [], {
              #additionalMessage: additionalMessage,
            }),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  Map<String, String> getBkashPaymentInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getBkashPaymentInfo, []),
            returnValue: <String, String>{},
          )
          as Map<String, String>);

  @override
  _i3.Future<void> resetPremiumStatus() =>
      (super.noSuchMethod(
            Invocation.method(#resetPremiumStatus, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> getPremiumInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getPremiumInfo, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i5.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> saveString(
    String? key,
    String? value, {
    bool? encrypted = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #saveString,
              [key, value],
              {#encrypted: encrypted},
            ),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<String?> getString(String? key, {bool? encrypted = true}) =>
      (super.noSuchMethod(
            Invocation.method(#getString, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<bool> saveInt(
    String? key,
    int? value, {
    bool? encrypted = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveInt, [key, value], {#encrypted: encrypted}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<int?> getInt(String? key, {bool? encrypted = false}) =>
      (super.noSuchMethod(
            Invocation.method(#getInt, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<int?>.value(),
          )
          as _i3.Future<int?>);

  @override
  _i3.Future<bool> saveBool(
    String? key, {
    required bool? value,
    bool? encrypted = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #saveBool,
              [key],
              {#value: value, #encrypted: encrypted},
            ),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool?> getBool(String? key, {bool? encrypted = false}) =>
      (super.noSuchMethod(
            Invocation.method(#getBool, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<bool?>.value(),
          )
          as _i3.Future<bool?>);

  @override
  _i3.Future<bool> saveDouble(
    String? key,
    double? value, {
    bool? encrypted = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #saveDouble,
              [key, value],
              {#encrypted: encrypted},
            ),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<double?> getDouble(String? key, {bool? encrypted = false}) =>
      (super.noSuchMethod(
            Invocation.method(#getDouble, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<double?>.value(),
          )
          as _i3.Future<double?>);

  @override
  _i3.Future<bool> saveStringList(
    String? key,
    List<String>? value, {
    bool? encrypted = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #saveStringList,
              [key, value],
              {#encrypted: encrypted},
            ),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<String>?> getStringList(
    String? key, {
    bool? encrypted = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getStringList, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<List<String>?>.value(),
          )
          as _i3.Future<List<String>?>);

  @override
  _i3.Future<bool> remove(String? key, {bool? encrypted = false}) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> containsKey(String? key, {bool? encrypted = false}) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> saveJson(
    String? key,
    Map<String, dynamic>? data, {
    bool? encrypted = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveJson, [key, data], {#encrypted: encrypted}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>?> getJson(
    String? key, {
    bool? encrypted = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getJson, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<bool> createBackup({String? customPath}) =>
      (super.noSuchMethod(
            Invocation.method(#createBackup, [], {#customPath: customPath}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> restoreFromBackup(String? backupPath) =>
      (super.noSuchMethod(
            Invocation.method(#restoreFromBackup, [backupPath]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<String>> getAvailableBackups() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBackups, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> markForSync(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#markForSync, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getSyncQueue() =>
      (super.noSuchMethod(
            Invocation.method(#getSyncQueue, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> removeFromSyncQueue(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#removeFromSyncQueue, [key]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearSyncQueue() =>
      (super.noSuchMethod(
            Invocation.method(#clearSyncQueue, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, dynamic>> getStorageStats() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageStats, []),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<String?> getStringCached(String? key, {bool? encrypted = true}) =>
      (super.noSuchMethod(
            Invocation.method(#getStringCached, [key], {#encrypted: encrypted}),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  void clearMemoryCache() => super.noSuchMethod(
    Invocation.method(#clearMemoryCache, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> getCacheStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCacheStats, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Future<bool> isHealthy() =>
      (super.noSuchMethod(
            Invocation.method(#isHealthy, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
